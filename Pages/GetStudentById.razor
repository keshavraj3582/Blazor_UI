@page "/getstudentbyid"
@using BlazorUI.Models;
@inject HttpClient HttpClient


<label for="studentId">Enter Student ID:</label>
<input type="text" id="studentId" @bind="studentId" required/>
<button @onclick="FetchStudentById">Fetch Student by ID</button>

<div style="margin:5px;padding:10px;text-align:center; color: red">
    <h6>@messgae</h6>
</div>


@if (selectedStudent != null)
{

    <div style="text-align:center;">
        <h4>Selected Student</h4>
        <table border="3" style="margin-left:auto;margin-right:auto;background-color:white">
            <tbody>
                <tr>
                    <td>Student ID</td>
                    <td>@selectedStudent.StudentId </td>
                </tr>
                <tr>
                    <td>Gender</td>
                    <td> @selectedStudent.Gender</td>
                </tr>
                <tr>
                    <td>Nationality</td>
                    <td>@selectedStudent.Nationality</td>
                </tr>
                <tr>
                    <td>PlaceOfBirth</td>
                    <td>@selectedStudent.PlaceOfBirth</td>
                </tr>
                <tr>
                    <td>StageID</td>
                    <td>@selectedStudent.StageId</td>
                </tr>
                <tr>
                    <td>GradeID</td>
                    <td>@selectedStudent.GradeId</td>
                </tr>
                <tr>
                    <td>SectionID</td>
                    <td>@selectedStudent.SectionId</td>
                </tr>
                <tr>
                    <td>Topic</td>
                    <td>@selectedStudent.Topic</td>
                </tr>
                <tr>
                    <td>Semester</td>
                    <td>@selectedStudent.Semester</td>
                </tr>
                <tr>
                    <td>Relation</td>
                    <td>@selectedStudent.Relation</td>
                </tr>
                <tr>
                    <td>RaisedHands</td>
                    <td>@selectedStudent.RaisedHands</td>
                </tr>
                <tr>
                    <td>VisitedResources</td>
                    <td>@selectedStudent.VisitedResources</td>
                </tr>
                <tr>
                    <td>AnnouncementsView</td>
                    <td>@selectedStudent.AnnouncementsView</td>
                </tr>
                <tr>
                    <td>Discussion</td>
                    <td>@selectedStudent.Discussion</td>
                </tr>
                <tr>
                    <td>ParentAnsweringSurvey</td>
                    <td>@selectedStudent.ParentAnsweringSurvey</td>
                </tr>
                <tr>
                    <td>ParentschoolSatisfaction</td>
                    <td>@selectedStudent.ParentSchoolSatisfaction</td>
                </tr>
                <tr>
                    <td>StudentAbsenceDays</td>
                    <td>@selectedStudent.StudentAbsenceDays</td>
                </tr>
                <tr>
                    <td>StudentMarks</td>
                    <td>@selectedStudent.StudentMarks</td>
                </tr>
                <tr>
                    <td>Classes</td>
                    <td>@selectedStudent.Class</td>
                </tr>

            </tbody>
        </table>
    </div>
}



@code {
    public IEnumerable<Student> students = null;
    public string studentId { get; set; }
    public Student selectedStudent { get; set; } = null;
    public string messgae = string.Empty;
    private async Task FetchStudentById()
    {

        try
        {

            if (!string.IsNullOrEmpty(studentId))
            {
               
                selectedStudent = await HttpClient.GetFromJsonAsync<Student>($"https://localhost:7078/api/Student/FindById?id={studentId}");
            }
            else
            {
                selectedStudent = null;
                messgae = "Student Id is required";
                return;
            }

            messgae = "";
        }
        catch (Exception ex)
        {
            selectedStudent = null;
            messgae = "Student Id is Invalid or Doesn't Exists";
        }
        
    }
}
@* @page "/getstudentbyid"
@using BlazorUI.Models;
@inject HttpClient httpClient


<h3>Get Student by ID</h3>


<p>Enter the Student ID you want to retrieve:</p>

<input type="text" @bind="studentId" />
<button class="btn btn-primary" @onclick="GetStudent">Retrieve</button>


@if (student != null)
{
    <h4>Student Details:</h4>
    <p><strong>Student ID:</strong> @student.StudentId</p>
    <p><strong>Gender:</strong> @student.Gender</p>
    <p><strong>NationalIty:</strong> student.Nationality</p>
    <p><strong>PlaceofBirth:</strong> @student.PlaceOfBirth</p>
    <p><strong>StageId:</strong> @student.StageId</p>
    <p><strong>GradeId:</strong> @student.GradeId</p>
    <p><strong>SectionId:</strong> @student.SectionId</p>
    <p><strong>Semester:</strong> @student.Semester</p>
    <p><strong>Relation:</strong> @student.Relation</p>
    <p><strong>RaisedHands:</strong> @student.RaisedHands</p>
    <p><strong>VisitedResources:</strong> @student.VisitedResources</p>
    <p><strong>AnnouncementsView:</strong> @student.AnnouncementsView</p>
    <p><strong>Discussion:</strong> @student.Discussion</p>
    <p><strong>ParentAnsweringSurvey:</strong> @student.ParentAnsweringSurvey</p>
    <p><strong>ParentSchoolSatisfaction:</strong> @student.ParentSchoolSatisfaction</p>
    <p><strong>StudentAbsenceDays:</strong> @student.StudentAbsenceDays</p>
    <p><strong>StudentMarks:</strong> @student.StudentMarks</p>
    <p><strong>Class:</strong> @student.Class</p>

}
else
{
    <p>Student not found.</p>
}

@code {
    private string studentId;
    private Student student;

    private async Task GetStudent()
    {
        // Create a variable to hold the student data
        Student studentData = null;

        // Check if the studentId is not empty
        if (!string.IsNullOrEmpty(studentId))
        {
            try
            {
                
                var response = await httpClient.GetAsync($"https://localhost:7078/api/Student/FindById?id={studentId}");

                if (response.IsSuccessStatusCode)
                {
                   
                    studentData = await response.Content.ReadFromJsonAsync<Student>();
                }
            }
            catch (Exception ex)
            {
               
            }
        }

        // Set the student variable to the retrieved data or null if not found
        student = studentData;
    }
} *@


